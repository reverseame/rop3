# Move value
move:
  # mov dst, src
  -
    - mnemonic: mov
      op1: dst
      op2: src

  # xchg dst, src
  -
    - mnemonic: xchg
      op1: dst
      op2: src

  # xor dst, dst
  # add dst, src
  -
    - mnemonic: xor
      op1: dst
      op2: dst
    - mnemonic: add
      op1: dst
      op2: src

  # and dst, src (dst = 0xFFFFFFFF)
  -
    - mnemonic: and
      op1: 
        reg: dst
        value: 0xFFFFFFFF
      op2: src

  # xor dst, dst
  # not dst
  # and dst, src
  -
    - mnemonic: xor
      op1: dst
      op2: dst
    - mnemonic: not
      op1: dst
    - mnemonic: and
      op1: dst
      op2: src

  # xor dst, dst
  # stc
  # adc dst, src
  -
    - mnemonic: xor
      op1: dst
      op2: dst
    - mnemonic: stc
    - mnemonic: adc
      op1: dst
      op2: src

  # clc
  # cmovnc dst, src
  -
    - mnemonic: clc
    - mnemonic: cmovnc
      op1: dst
      op2: src

  # stc
  # cmovc dst, src
  -
    - mnemonic: stc
    - mnemonic: cmovc
      op1: dst
      op2: src

  # mov dst, src
  -
    - mnemonic: mov
      op1: dst
      op2: src

  # push src
  # pop dst
  -
    - mnemonic: push
      op1: src
    - mnemonic: pop
      op1: dst

  # xor eax, eax
  # inc eax
  # mul dst
  -
    - mnemonic: xor
      op1: eax
      op2: eax
    - mnemonic: inc
      op1: eax
    - mnemonic: mul
      op1: dst

  # xor src, src
  # xadd src, dst
  -
    - mnemonic: xor
      op1: src
      op2: src
    - mnemonic: xadd
      op1: src
      op2: dst

  # xor dst, dst
  # neg src
  # sub dst, src
  -
    - mnemonic: xor
      op1: dst
      op2: dst
    - mnemonic: neg
      op1: src
    - mnemonic: sub
      op1: dst
      op2: src
